<?php

namespace FormationBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * temporaireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class temporaireRepository extends \Doctrine\ORM\EntityRepository
{
    public function afficherInscription($id)
    {
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "SELECT f.Nom , d.nom_domaine , f.Nombres ,f.image,U.fullname,u.tel,i.id,i.lettre_motivation,i.specialite,i.ecole,i.Datecreation,i.etat_id from inscriptions i JOIN formations f on i.formation_ref = f.ref join domainesformation d on d.id = f.domaine_id join users U on U.id = i.user_id
where f.entreprise_id =:idt";
        $statement=$em->getConnection()->prepare($RAW_QUERY);
        $statement->bindValue('idt',$id);
        $statement->execute();
        $result=$statement->fetchAll();

        return $result;

    }
    public function ajoutEtat($id)
    {
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "UPDATE inscriptions SET etat_id=2 WHERE id=:idt";
        $statement=$em->getConnection()->prepare($RAW_QUERY);

        $statement->bindValue('idt',$id);
        $statement->execute();



    }
    public function ajoutEtatt($id)
    {
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "UPDATE inscriptions SET etat_id=3 WHERE id=:idt";
        $statement=$em->getConnection()->prepare($RAW_QUERY);

        $statement->bindValue('idt',$id);
        $statement->execute();



    }

    public function ajoutNbre($id)
    {
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "UPDATE formations SET Nombres =  Nombres - 1 WHERE ref =:idt ";
        $statement=$em->getConnection()->prepare($RAW_QUERY);

        $statement->bindValue('idt',$id);

        $statement->execute();



    }
    public function affichermesformationsinscriptions($id)
    {
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "SELECT f.Nom , d.nom_domaine ,f.image,f.description,f.duree,f.date_debut,f.date_fin,i.etat_id from inscriptions i JOIN formations f on i.formation_ref = f.ref join domainesformation d on d.id = f.domaine_id  join users U on U.id = i.user_id
 where i.user_id =:idt ";
        $statement=$em->getConnection()->prepare($RAW_QUERY);
        $statement->bindValue('idt',$id);
        $statement->execute();
        $result=$statement->fetchAll();
        return $result;

    }



    public function setEtat($id)
    {
        $em = $query = $this->getEntityManager();
        $RAW_QUERY = "UPDATE inscriptions SET etat_id = 3 WHERE user_id=:idt ";
        $statement = $em->getConnection()->prepare($RAW_QUERY);

        $statement->bindValue('idt', $id);
        $statement->execute();


    }
    public function checkifpostuler($user_id,$id)
    {
        $q = $this->getEntityManager()
            ->createQuery("select count(c) from FormationBundle:Inscriptions c where IDENTITY(c.user) = :idu and IDENTITY(c.formationRef) = :id")
            ->setParameters(array('idu' => $user_id, 'id' => $id));
        try {
            return $query = $q->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }
    }
    public function idinscription($id)
    {
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "SELECT * from inscriptions WHERE user_id=:idt";
        $statement=$em->getConnection()->prepare($RAW_QUERY);

        $statement->bindValue('idt',$id);
        $statement->execute();
        $result=$statement->fetchAll();
        return $result;


    }
    public function idddinscription($id)
    {
        $q = $this->getEntityManager()
            ->createQuery("select c from FormationBundle:Inscriptions c where c.user = :idu")
            ->setParameter('idu',$id);
        return $query = $q->getResult();

    }

    public function totalformation()
    {
        $q = $this->getEntityManager()
            ->createQuery("select count(c) from FormationBundle:Formations c");
        try {
            return $query = $q->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }

    }
    public function totaldomaines()
    {
        $q = $this->getEntityManager()
            ->createQuery("select count(c) from FormationBundle:DomainesFormation c");
        try {
            return $query = $q->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }

    }
    public function getrefbyid($id,$ide){
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "SELECT formation_ref from inscriptions WHERE user_id=:idt and id=:ide";
        $statement=$em->getConnection()->prepare($RAW_QUERY);

        $statement->bindValue('idt',$id)
            ->bindValue('ide',$ide);
        $statement->execute();
        $result=$statement->fetchAll();
        return $result;
    }
    public function findEntitiesByStrin($str){
        return $this->getEntityManager()
            ->createQuery(
                "SELECT p
                FROM FormationBundle:Formations p
                WHERE p.nom LIKE :str "
            )
            ->setParameter('str', '%'.$str.'%')

            ->getResult();
    }
    public function listinscrits($id)
    {
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "select  f.Nom , f.date_debut , f.date_fin, d.nom_domaine ,u.fullname from  formations f join inscriptions i on i.formation_ref =f.ref join  domainesformation d on d.id = f.domaine_id join users u on i.user_id = u.id
               where f.entreprise_id = :idt";
        $statement=$em->getConnection()->prepare($RAW_QUERY);
        $statement->bindValue('idt',$id);

        $statement->execute();
        $result=$statement->fetchAll();
        return $result;




    }
    public function annulerNbre($id)
    {
        $em= $query=$this->getEntityManager();
        $RAW_QUERY = "UPDATE formations SET Nombres =  Nombres + 1 WHERE ref =:idt ";
        $statement=$em->getConnection()->prepare($RAW_QUERY);

        $statement->bindValue('idt',$id);

        $statement->execute();



    }

}
